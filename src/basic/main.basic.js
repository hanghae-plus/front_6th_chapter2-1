import {
  Header,
  GridContainer,
  LeftColumn,
  RightColumn,
  TotalItemCount,
  SelectorContainer,
  ProductSelector,
  AddButton,
  ProductOption,
  StockInfoText,
  CartItem,
  CartItemBox,
  CartTotal,
  ManualToggle,
  ManualOverlay,
  ManualColumn,
  DiscountInfo,
  LoyaltyPoints,
  SummaryDetails,
} from "./components";
import { prodList } from "./data";
import { PRODUCT_ONE, PRODUCT_TWO, PRODUCT_THREE } from "./constants";
import { getOrderSummary } from "./entity/order";
import { getStockInfoMessage } from "./entity/stock";

// ÎßàÏßÄÎßâÏúºÎ°ú ÏÑ†ÌÉùÎêú ÏÉÅÌíà ID Ï†ÄÏû• (Ï∂îÏ≤ú ÏÑ∏ÏùºÏóêÏÑú ÏÇ¨Ïö©)
let lastSel = null;

// Í∞Å UI Ïª¥Ìè¨ÎÑåÌä∏ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
let productSelector = ProductSelector();
let addBtn = AddButton({
  onClick: () => handleAddToCart(productSelector.value),
});
let stockInfo = StockInfoText();
let cartItemBox = CartItemBox({ onClick: (e) => handleCartItemClick(e) });

/**
 * Ï¥àÍ∏∞ DOM Íµ¨ÏÑ± Î∞è Î†åÎçîÎßÅ
 * @returns {Object} ‚Äì Ïù¥ÌõÑÏóê ÌïÑÏöîÌï† Ïàò ÏûàÎäî Î™áÎ™á ÏöîÏÜåÎì§ÏùÑ Î∞òÌôò
 */
const initRender = () => {
  let root = document.getElementById("app");

  // ÏÉÅÎã® Ìó§Îçî Î∞è Î†àÏù¥ÏïÑÏõÉ Ïª®ÌÖåÏù¥ÎÑà ÏÉùÏÑ±
  let header = Header();
  let gridContainer = GridContainer();
  let leftColumn = LeftColumn();
  let selectorContainer = SelectorContainer();
  let rightColumn = RightColumn();
  let manualToggle = ManualToggle();
  let manualOverlay = ManualOverlay();
  let manualColumn = ManualColumn();

  // ÏÉÅÌíà ÏÑ†ÌÉù UI Ï°∞Ìï©
  selectorContainer.appendChild(productSelector);
  selectorContainer.appendChild(addBtn);
  selectorContainer.appendChild(stockInfo);
  leftColumn.appendChild(selectorContainer);
  leftColumn.appendChild(cartItemBox);

  // Î†àÏù¥ÏïÑÏõÉÏóê Ï¢å/Ïö∞ Ïª¨Îüº Î∞è Îß§Îâ¥Ïñº Ï∂îÍ∞Ä
  gridContainer.appendChild(leftColumn);
  gridContainer.appendChild(rightColumn);
  manualOverlay.appendChild(manualColumn);
  root.appendChild(header);
  root.appendChild(gridContainer);
  root.appendChild(manualToggle);
  root.appendChild(manualOverlay);

  return {
    rightColumn,
    manualToggle,
    manualOverlay,
    manualColumn,
  };
};

/**
 * ÏÑ±Í≥µ ÏΩúÎ∞±ÏùÑ Î∞õÎäî ÎûòÌçº (Í∞ÑÎã®Ìïú ÌõÖ ÎåÄÏ≤¥)
 * @param {Function} fn ‚Äì Ïã§ÌñâÌï† Ìï®Ïàò
 * @param {Object} param1
 * @param {Function} param1.onSuccess ‚Äì ÏÑ±Í≥µ ÌõÑ Ìò∏Ï∂úÎê† Ìï®Ïàò
 * @returns {Function}
 */
const useFunction = (fn, { onSuccess }) => {
  return () => {
    const result = fn();
    onSuccess(result);
  };
};

/**
 * Ïû•Î∞îÍµ¨Îãà ÏöîÏïΩÏùÑ Í≥ÑÏÇ∞ÌïòÍ≥† Í¥ÄÎ†® UI ÏóÖÎç∞Ïù¥Ìä∏
 */
const handleCalculateCartStuff = useFunction(
  () => getOrderSummary({ cartItems: [...cartItemBox.children] }),
  {
    onSuccess: (summary) => {
      // ÏöîÏïΩ ÏÑ∏Î∂ÄÏ†ïÎ≥¥ UI Î∞òÏòÅ
      SummaryDetails(summary);
      CartTotal(summary);
      LoyaltyPoints(summary);

      // Î≥¥ÎÑàÏä§ Ìè¨Ïù∏Ìä∏ Í≥ÑÏÇ∞ Î∞è Î†åÎçî
      doRenderBonusPoints(summary);

      // Ìï†Ïù∏ Ï†ïÎ≥¥, Ï¥ù Í∞úÏàò Îì± ÏóÖÎç∞Ïù¥Ìä∏
      DiscountInfo(summary);
      TotalItemCount(summary);
      stockInfo.textContent = getStockInfoMessage();

      // ÏàòÎüâ 10Í∞ú Ïù¥ÏÉÅÏù∏ Ìï≠Î™© Í∏ÄÏûê ÍµµÍ≤å
      setBoldTextForTenOrMore(summary);

      // ÌôîÏöîÏùº ÌäπÍ∞Ä ÎÖ∏Ï∂ú
      displayTuesdaySpecial(summary);

      // item-count ÏòÅÏó≠ ÌÖçÏä§Ìä∏ Î∞òÏòÅ
      displayTotalItemCount(summary);
    },
  }
);

/**
 * Ïï± Ï¥àÍ∏∞ ÏßÑÏûÖÏ†ê
 */
const main = () => {
  const { manualToggle, manualOverlay, manualColumn } = initRender();

  // Îß§Îâ¥Ïñº ÌÜ†Í∏Ä ÎèôÏûë ÏÑ§Ï†ï
  manualToggle.onclick = () => {
    manualOverlay.classList.toggle("hidden");
    manualColumn.classList.toggle("translate-x-full");
  };
  manualOverlay.onclick = (e) => {
    if (e.target === manualOverlay) {
      manualOverlay.classList.add("hidden");
      manualColumn.classList.add("translate-x-full");
    }
  };

  // ÏÖÄÎ†âÌä∏ ÏòµÏÖò Ï¥àÍ∏∞Ìôî Î∞è Ïû•Î∞îÍµ¨Îãà ÏöîÏïΩ Î†åÎçî
  onUpdateSelectOptions();
  handleCalculateCartStuff();

  // ÎûúÎç§ ÏßÄÏó∞ÏùÑ Ï£ºÍ≥† Ï£ºÍ∏∞Ï†ÅÏúºÎ°ú ÏÑ∏Ïùº/Ï∂îÏ≤ú ÏïåÎ¶º Ïã§Ìñâ
  let randomBaseDelay = Math.random() * 10000;
  const useIntervalEffect = (delay = randomBaseDelay, interval = 30000, Fn) => {
    setTimeout(() => {
      setInterval(Fn, interval);
    }, delay);
  };

  // Î≤àÍ∞úÏÑ∏Ïùº: Î¨¥ÏûëÏúÑ ÏÉÅÌíàÏóê 20% Ìï†Ïù∏ Ï†ÅÏö©
  const applyLuckySaleAlert = () => {
    const luckyIdx = Math.floor(Math.random() * prodList.length);
    const luckyItem = prodList[luckyIdx];

    if (luckyItem.quantity > 0 && !luckyItem.onSale) {
      luckyItem.price = Math.round((luckyItem.originalPrice * 80) / 100);
      luckyItem.onSale = true;
      alert(`‚ö°Î≤àÍ∞úÏÑ∏Ïùº! ${luckyItem.name}Ïù¥(Í∞Ä) 20% Ìï†Ïù∏ Ï§ëÏûÖÎãàÎã§!`);
      onUpdateSelectOptions();
      doUpdatePricesInCart();
      handleCalculateCartStuff();
    }
  };

  // Ï∂îÏ≤úÏÑ∏Ïùº: ÎßàÏßÄÎßâ ÏÑ†ÌÉùÍ≥º Îã§Î•∏ ÏÉÅÌíàÏùÑ Ï∂îÏ≤ú
  const applySuggestSaleAlert = () => {
    if (lastSel) {
      let suggest = prodList.find(
        (item) => item.id !== lastSel && item.quantity > 0 && !item.suggestSale
      );
      if (suggest) {
        alert(
          `üíù ${suggest.name}ÏùÄ(Îäî) Ïñ¥Îñ†ÏÑ∏Ïöî? ÏßÄÍ∏à Íµ¨Îß§ÌïòÏãúÎ©¥ 5% Ï∂îÍ∞Ä Ìï†Ïù∏!`
        );
        suggest.val = Math.round((suggest.val * (100 - 5)) / 100);
        suggest.suggestSale = true;
        onUpdateSelectOptions();
        doUpdatePricesInCart();
        handleCalculateCartStuff();
      }
    }
  };

  useIntervalEffect(randomBaseDelay, 30000, applyLuckySaleAlert);
  useIntervalEffect(randomBaseDelay * 2, 60000, applySuggestSaleAlert);
};

/**
 * ÏÖÄÎ†âÌä∏ ÏòµÏÖò(ÏÉÅÌíà Î¶¨Ïä§Ìä∏) Îã§Ïãú Î†åÎçî + Ï¥ù Ïû¨Í≥†Ïóê Îî∞Îùº Ïä§ÌÉÄÏùº Î≥ÄÍ≤Ω
 */
const onUpdateSelectOptions = () => {
  productSelector.innerHTML = "";
  productSelector.append(...prodList.map(ProductOption));

  const totalStock = prodList.reduce((acc, item) => acc + item.quantity, 0);
  productSelector.style.borderColor = totalStock < 50 ? "orange" : "";
};

/**
 * Ïû•Î∞îÍµ¨ÎãàÏóê ÌäπÏ†ï ÏÑ∏Ìä∏Í∞Ä ÏûàÎäîÏßÄ Ïó¨Î∂Ä Í≥ÑÏÇ∞
 */
const getHasItemInCart = (cartItems) => {
  return {
    hasKeyboard: cartItems.some((item) => item.id === PRODUCT_ONE),
    hasMouse: cartItems.some((item) => item.id === PRODUCT_TWO),
    hasMonitorArm: cartItems.some((item) => item.id === PRODUCT_THREE),
  };
};

/**
 * Ìè¨Ïù∏Ìä∏ Í≥ÑÏÇ∞ Î°úÏßÅ: Í∏∞Î≥∏, ÏÑ∏Ìä∏, ÎåÄÎüâ Íµ¨Îß§, ÌôîÏöîÏùº Îì±
 */
const getCalculatePoints = ({
  totalItemCount,
  totalDiscountedPrice,
  hasKeyboard,
  hasMouse,
  hasMonitorArm,
}) => {
  const basePoints = Math.floor(totalDiscountedPrice / 1000);

  // Ï†ÅÏö© Í∞ÄÎä•Ìïú Ïù¥Î≤§Ìä∏Îì§ Ï†ïÏùò
  const saleEvents = [
    {
      condition: () => basePoints > 0,
      calcSalePoint: () => basePoints,
      message: `Í∏∞Î≥∏: ${basePoints}p`,
    },
    {
      condition: () => new Date().getDay() === 2 && basePoints > 0,
      calcSalePoint: () => basePoints * 2,
      message: "ÌôîÏöîÏùº 2Î∞∞",
    },
    {
      condition: () => hasKeyboard && hasMouse,
      calcSalePoint: (points) => points + 50,
      message: "ÌÇ§Î≥¥Îìú+ÎßàÏö∞Ïä§ ÏÑ∏Ìä∏ +50p",
    },
    {
      condition: () => hasKeyboard && hasMouse && hasMonitorArm,
      calcSalePoint: (points) => points + 100,
      message: "ÌíÄÏÑ∏Ìä∏ Íµ¨Îß§ +100p",
    },
    {
      condition: () => totalItemCount >= 30,
      calcSalePoint: (points) => points + 100,
      message: "ÎåÄÎüâÍµ¨Îß§(30Í∞ú+) +100p",
    },
    {
      condition: () => totalItemCount >= 20 && totalItemCount < 30,
      calcSalePoint: (points) => points + 50,
      message: "ÎåÄÎüâÍµ¨Îß§(20Í∞ú+) +50p",
    },
    {
      condition: () => totalItemCount >= 10 && totalItemCount < 20,
      calcSalePoint: (points) => points + 20,
      message: "ÎåÄÎüâÍµ¨Îß§(10Í∞ú+) +20p",
    },
  ];

  let finalPoints = 0;
  const pointsDetail = [];
  saleEvents.forEach(({ calcSalePoint, condition, message }) => {
    if (condition()) {
      finalPoints = calcSalePoint(finalPoints);
      pointsDetail.push(message);
    }
  });

  return {
    basePoints,
    finalPoints,
    pointsDetail,
  };
};

/**
 * Î≥¥ÎÑàÏä§ Ìè¨Ïù∏Ìä∏ Î†åÎçîÎßÅ (Ïû•Î∞îÍµ¨ÎãàÍ∞Ä ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏùÑ ÎïåÎßå)
 */
const doRenderBonusPoints = ({
  totalItemCount,
  totalDiscountedPrice,
  cartItems,
}) => {
  if (cartItems.length === 0) {
    return;
  }

  const { hasKeyboard, hasMouse, hasMonitorArm } = getHasItemInCart(cartItems);

  const { finalPoints, pointsDetail } = getCalculatePoints({
    totalItemCount,
    totalDiscountedPrice,
    hasKeyboard,
    hasMouse,
    hasMonitorArm,
  });

  LoyaltyPoints({
    totalDiscountedPrice,
    cartItems,
    bonusPoints: finalPoints,
    pointsDetail,
  });
};

/**
 * Ïû•Î∞îÍµ¨Îãà ÎÇ¥ ÏÉÅÌíà Ï†ïÎ≥¥Î•º Í∏∞Î∞òÏúºÎ°ú Í∞ÄÍ≤©/Ïù¥Î¶Ñ ÏóÖÎç∞Ïù¥Ìä∏
 */
const doUpdatePricesInCart = () => {
  let cartItems = [...cartItemBox.children];
  cartItems.forEach((cartItem) => {
    let product = prodList.find((item) => item.id === cartItem.id);
    if (product) {
      const priceDiv = cartItem.querySelector(".text-lg");
      const nameDiv = cartItem.querySelector("h3");
      priceDiv.textContent = "‚Ç©" + product.price.toLocaleString();
      nameDiv.textContent = product.name;

      // ÏÑ∏Ïùº/Ï∂îÏ≤ú ÌëúÍ∏∞ Î°úÏßÅ
      if (product.onSale && product.suggestSale) {
        priceDiv.innerHTML = `<span class="line-through text-gray-400">‚Ç©${product.originalPrice.toLocaleString()}</span> <span class="text-purple-600">‚Ç©${product.price.toLocaleString()}</span>`;
        nameDiv.textContent = `‚ö°üíù${product.name}`;
      }
      if (product.onSale) {
        priceDiv.innerHTML = `<span class="line-through text-gray-400">‚Ç©${product.originalPrice.toLocaleString()}</span> <span class="text-red-500">‚Ç©${product.price.toLocaleString()}</span>`;
        nameDiv.textContent = "‚ö°" + product.name;
      }
      if (product.suggestSale) {
        priceDiv.innerHTML = `<span class="line-through text-gray-400">‚Ç©${product.originalPrice.toLocaleString()}</span> <span class="text-blue-500">‚Ç©${product.price.toLocaleString()}</span>`;
        nameDiv.textContent = "üíù" + product.name;
      }
    }
  });
};

/**
 * ÏàòÎüâÏù¥ 10Í∞ú Ïù¥ÏÉÅÏù∏ Ìï≠Î™© Í∞ÄÍ≤© ÌÖçÏä§Ìä∏Î•º ÍµµÍ≤å Ï≤òÎ¶¨
 */
const setBoldTextForTenOrMore = (summary) => {
  summary.cartItems.forEach((item) => {
    const priceTexts = item.querySelectorAll(".text-lg");
    priceTexts.forEach((text) => {
      const quantity = Number(
        item.querySelector(".quantity-number").textContent
      );
      text.style.fontWeight = quantity >= 10 ? "bold" : "normal";
    });
  });
};

/**
 * ÌôîÏöîÏùº ÌäπÍ∞Ä UI ÌÜ†Í∏Ä
 */
const displayTuesdaySpecial = (summary) => {
  const { isTuesday, totalDiscountedPrice, totalItemCount } = summary;
  const tuesdaySpecial = document.getElementById("tuesday-special");
  if (isTuesday) {
    if (totalDiscountedPrice > 0) {
      tuesdaySpecial.classList.remove("hidden");
    } else {
      tuesdaySpecial.classList.add("hidden");
    }
  } else {
    tuesdaySpecial.classList.add("hidden");
  }
};

/**
 * Ïû•Î∞îÍµ¨Îãà Ï¥ù Í∞úÏàò ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
 */
const displayTotalItemCount = (summary) => {
  const { totalItemCount } = summary;
  document.getElementById("item-count").textContent =
    `üõçÔ∏è ${totalItemCount} items in cart`;
};

// Ïï± ÏãúÏûë
main();

/**
 * Ïû•Î∞îÍµ¨ÎãàÏóê ÏÉÅÌíà Ï∂îÍ∞Ä Ï≤òÎ¶¨
 * @param {string} selectedId ‚Äì ÏÑ†ÌÉùÎêú ÏÉÅÌíà ID
 */
const handleAddToCart = (selectedId) => {
  const itemToAdd = prodList.find((item) => item.id === selectedId);
  if (!itemToAdd || itemToAdd.quantity === 0) {
    return; // ÏóÜÎäî ÏÉÅÌíàÏù¥Í±∞ÎÇò ÌíàÏ†àÏù¥Î©¥ Î¨¥Ïãú
  }

  // Ïù¥ÎØ∏ DOMÏóê Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
  const item = document.getElementById(itemToAdd["id"]);
  if (!item) {
    // ÏÉàÎ°ú Ï∂îÍ∞Ä
    const cartItem = CartItem(itemToAdd);
    cartItemBox.appendChild(cartItem);
    itemToAdd.quantity--;

    handleCalculateCartStuff();
    lastSel = itemToAdd.id;
    return;
  }

  // Í∏∞Ï°¥ ÏïÑÏù¥ÌÖú ÏàòÎüâ Ï¶ùÍ∞Ä
  const currentQuantityEl = item.querySelector(".quantity-number");
  const currentQuantity = parseInt(currentQuantityEl.textContent);
  const newQuantity = currentQuantity + 1;

  if (newQuantity > itemToAdd.quantity + currentQuantity) {
    alert("Ïû¨Í≥†Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§.");
  }

  currentQuantityEl.textContent = newQuantity;
  itemToAdd.quantity--;

  handleCalculateCartStuff();
  lastSel = itemToAdd.id;
};

/**
 * Ïû•Î∞îÍµ¨Îãà ÏïÑÏù¥ÌÖú ÌÅ¥Î¶≠ (ÏàòÎüâ Ï°∞Ï†à / Ï†úÍ±∞) Ï≤òÎ¶¨
 */
const handleCartItemClick = (event) => {
  const target = event.target;
  if (
    target.classList.contains("quantity-change") ||
    target.classList.contains("remove-item")
  ) {
    const currentProductId = target.dataset.productId;
    const currentCartItem = document.getElementById(currentProductId);
    const currentProduct = prodList.find(
      (item) => item.id === currentProductId
    );
    const currentQuantityEl = currentCartItem.querySelector(".quantity-number");
    const currentQuantity = parseInt(currentQuantityEl.textContent);

    if (target.classList.contains("quantity-change")) {
      const offset = parseInt(target.dataset.change);
      const newQuantity = currentQuantity + offset;

      const availableStock = currentProduct.quantity + currentQuantity;

      // ÏàòÎüâÏù¥ 0 Ïù¥ÌïòÏù¥Î©¥ Ï†úÍ±∞
      if (newQuantity <= 0) {
        currentProduct.quantity += currentQuantity;
        currentCartItem.remove();
        return;
      }

      // Ïû¨Í≥† Ï¥àÍ≥º Î∞©ÏßÄ
      if (newQuantity > availableStock) {
        alert("Ïû¨Í≥†Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§.");
        return;
      }

      // Ï†ïÏÉÅÏ†ÅÏù∏ ÏàòÎüâ Î≥ÄÍ≤Ω
      currentQuantityEl.textContent = String(newQuantity);
      currentProduct.quantity -= offset;
    } else if (target.classList.contains("remove-item")) {
      // ÏôÑÏ†Ñ Ï†úÍ±∞: ÌòÑÏû¨ ÏàòÎüâÏùÑ Ïû¨Í≥†Î°ú Î≥µÍµ¨
      currentProduct.quantity += currentQuantity;
      currentCartItem.remove();
    }
    handleCalculateCartStuff();
    onUpdateSelectOptions(); // ÏÖÄÎ†âÌä∏ ÏòµÏÖò (Ïû¨Í≥† Í∏∞Î∞ò) Îã§Ïãú Í∞±Ïã†
  }
};
