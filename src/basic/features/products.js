/**
 * Products Feature - ÌÜµÌï© Î™®Îìà
 * ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨, UI Ï≤òÎ¶¨, ÌÖúÌîåÎ¶ø Í¥ÄÎ¶¨
 */

// Constants import
import {
  INITIAL_PRODUCT_DATA,
  SUPER_SALE_TEXT,
  LIGHTNING_SALE_TEXT,
  SUGGESTION_SALE_TEXT,
} from "../constants.js";

// ==================== Product Data Management ====================

/**
 * ÏÉÅÌíà Î™©Î°ùÏùÑ Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§
 * @returns {Array} Ï¥àÍ∏∞ÌôîÎêú ÏÉÅÌíà Î™©Î°ù
 */
export const initializeProducts = () => {
  return [...INITIAL_PRODUCT_DATA];
};

/**
 * ÏÉÅÌíà IDÎ°ú ÏÉÅÌíàÏùÑ Ï∞æÏäµÎãàÎã§
 * @param {string} productId - Ï∞æÏùÑ ÏÉÅÌíà ID
 * @param {Array} productList - ÏÉÅÌíà Î™©Î°ù Î∞∞Ïó¥
 * @returns {Object|undefined} Ï∞æÏùÄ ÏÉÅÌíà Í∞ùÏ≤¥ ÎòêÎäî undefined
 */
export const findProductById = (productId, productList) => {
  return productList.find(product => product.id === productId);
};

/**
 * Ïû¨Í≥†Í∞Ä Î∂ÄÏ°±Ìïú ÏÉÅÌíàÎì§ÏùÑ Ï∞æÏäµÎãàÎã§
 * @param {Array} productList - ÏÉÅÌíà Î™©Î°ù
 * @param {number} threshold - Ïû¨Í≥† Î∂ÄÏ°± Í∏∞Ï§Ä
 * @returns {Array} Ïû¨Í≥† Î∂ÄÏ°± ÏÉÅÌíà Î™©Î°ù
 */
export const getLowStockProducts = (productList, threshold) => {
  return productList.filter(
    product => product.quantity > 0 && product.quantity < threshold
  );
};

// ==================== Product Options UI ====================

/**
 * ÏÉÅÌíà ÏòµÏÖòÏùò ÌëúÏãú Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§
 * @param {Object} item - ÏÉÅÌíà Ï†ïÎ≥¥ Í∞ùÏ≤¥
 * @param {string} item.name - ÏÉÅÌíàÎ™Ö
 * @param {number} item.price - ÌòÑÏû¨ Í∞ÄÍ≤©
 * @param {number} item.originalPrice - ÏõêÎûò Í∞ÄÍ≤©
 * @param {number} item.quantity - Ïû¨Í≥† ÏàòÎüâ
 * @param {boolean} item.onSale - Î≤àÍ∞úÏÑ∏Ïùº Ïó¨Î∂Ä
 * @param {boolean} item.suggestSale - Ï∂îÏ≤úÌï†Ïù∏ Ïó¨Î∂Ä
 * @returns {Object} ÏòµÏÖò ÌëúÏãú Ï†ïÎ≥¥
 * @returns {string} returns.textContent - ÌëúÏãúÌï† ÌÖçÏä§Ìä∏
 * @returns {string} returns.className - CSS ÌÅ¥ÎûòÏä§Î™Ö
 * @returns {boolean} returns.disabled - ÎπÑÌôúÏÑ±Ìôî Ïó¨Î∂Ä
 */
export const getOptionData = item => {
  const discountText =
    (item.onSale ? " ‚ö°SALE" : "") + (item.suggestSale ? " üíùÏ∂îÏ≤ú" : "");

  // ÌíàÏ†àÏù∏ Í≤ΩÏö∞
  if (item.quantity === 0) {
    return {
      textContent: `${item.name} - ${item.price}Ïõê (ÌíàÏ†à)${discountText}`,
      className: "text-gray-400",
      disabled: true,
    };
  }

  // Í≤ΩÏö∞Î≥Ñ Îß§Ìïë Í∞ùÏ≤¥
  const saleTypeMap = {
    bothSales: item.onSale && item.suggestSale,
    lightningOnly: item.onSale && !item.suggestSale,
    suggestionOnly: !item.onSale && item.suggestSale,
    normal: !item.onSale && !item.suggestSale,
  };

  const optionConfigs = {
    bothSales: {
      textContent: `‚ö°üíù${item.name} - ${item.originalPrice}Ïõê ‚Üí ${item.price}Ïõê (${SUPER_SALE_TEXT})`,
      className: "text-purple-600 font-bold",
      disabled: false,
    },
    lightningOnly: {
      textContent: `‚ö°${item.name} - ${item.originalPrice}Ïõê ‚Üí ${item.price}Ïõê (${LIGHTNING_SALE_TEXT})`,
      className: "text-red-500 font-bold",
      disabled: false,
    },
    suggestionOnly: {
      textContent: `üíù${item.name} - ${item.originalPrice}Ïõê ‚Üí ${item.price}Ïõê (${SUGGESTION_SALE_TEXT})`,
      className: "text-blue-500 font-bold",
      disabled: false,
    },
    normal: {
      textContent: `${item.name} - ${item.price}Ïõê${discountText}`,
      className: "",
      disabled: false,
    },
  };

  // Ìï¥ÎãπÌïòÎäî Í≤ΩÏö∞ Ï∞æÍ∏∞
  const activeType = Object.keys(saleTypeMap).find(type => saleTypeMap[type]);
  return optionConfigs[activeType];
};

/**
 * Ïû•Î∞îÍµ¨Îãà ÎÇ¥ ÏÉÅÌíàÏùò ÌëúÏãú Ï†ïÎ≥¥Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§
 * @param {Object} product - ÏÉÅÌíà Ï†ïÎ≥¥ Í∞ùÏ≤¥
 * @param {string} product.name - ÏÉÅÌíàÎ™Ö
 * @param {number} product.price - ÌòÑÏû¨ Í∞ÄÍ≤©
 * @param {number} product.originalPrice - ÏõêÎûò Í∞ÄÍ≤©
 * @param {boolean} product.onSale - Î≤àÍ∞úÏÑ∏Ïùº Ïó¨Î∂Ä
 * @param {boolean} product.suggestSale - Ï∂îÏ≤úÌï†Ïù∏ Ïó¨Î∂Ä
 * @returns {Object} ÌëúÏãú Ï†ïÎ≥¥
 * @returns {string} returns.priceHtml - Í∞ÄÍ≤© HTML
 * @returns {string} returns.nameText - Ïù¥Î¶Ñ ÌÖçÏä§Ìä∏
 */
export const getProductDisplayInfo = product => {
  const hasBothSales = product.onSale && product.suggestSale;
  const hasLightningSale = product.onSale && !product.suggestSale;
  const hasSuggestionSale = !product.onSale && product.suggestSale;

  if (hasBothSales) {
    return {
      priceHtml: `<span class="line-through text-gray-400">‚Ç©${product.originalPrice.toLocaleString()}</span> <span class="text-purple-600">‚Ç©${product.price.toLocaleString()}</span>`,
      nameText: "‚ö°üíù" + product.name,
    };
  }

  if (hasLightningSale) {
    return {
      priceHtml: `<span class="line-through text-gray-400">‚Ç©${product.originalPrice.toLocaleString()}</span> <span class="text-red-500">‚Ç©${product.price.toLocaleString()}</span>`,
      nameText: "‚ö°" + product.name,
    };
  }

  if (hasSuggestionSale) {
    return {
      priceHtml: `<span class="line-through text-gray-400">‚Ç©${product.originalPrice.toLocaleString()}</span> <span class="text-blue-500">‚Ç©${product.price.toLocaleString()}</span>`,
      nameText: "üíù" + product.name,
    };
  }

  return {
    priceHtml: `‚Ç©${product.price.toLocaleString()}`,
    nameText: product.name,
  };
};

/**
 * product select optionsÎ•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§ (HTML Í∏∞Î∞ò)
 * @param {Array} productList - ÏÉÅÌíà Î™©Î°ù
 * @param {Element} productSelectElement - select DOM element
 * @param {number} totalStockWarningThreshold - Ïû¨Í≥† Í≤ΩÍ≥† ÏûÑÍ≥ÑÍ∞í
 */
export const updateSelectOptions = (
  productList,
  productSelectElement,
  totalStockWarningThreshold
) => {
  const totalStock = productList.reduce(
    (sum, product) => sum + product.quantity,
    0
  );

  const optionsHTML = productList
    .map(item => {
      const optionData = getOptionData(item);
      const disabledAttr = optionData.disabled ? " disabled" : "";
      const classAttr = optionData.className
        ? ` class="${optionData.className}"`
        : "";

      return `<option value="${item.id}"${disabledAttr}${classAttr}>${optionData.textContent}</option>`;
    })
    .join("");

  productSelectElement.innerHTML = optionsHTML;
  productSelectElement.style.borderColor =
    totalStock < totalStockWarningThreshold ? "orange" : "";
};
