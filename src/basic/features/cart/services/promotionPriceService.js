/**
 * ÌîÑÎ°úÎ™®ÏÖò Í∞ÄÍ≤© ÏÑúÎπÑÏä§
 * ÌîÑÎ°úÎ™®ÏÖò Í¥ÄÎ†® Í∞ÄÍ≤© ÏóÖÎç∞Ïù¥Ìä∏ Î°úÏßÅ
 */

import { findProductById } from '@/basic/features/product/utils/productUtils.js';
import { setInnerHTML, setTextContent } from '@/basic/shared/core/domUtils.js';

/**
 * Ïû•Î∞îÍµ¨ÎãàÏùò Î™®Îì† Í∞ÄÍ≤© ÏóÖÎç∞Ïù¥Ìä∏ (Î©îÏù∏ Ìï®Ïàò)
 * @param {HTMLElement} cartDisplayElement - Cart display container
 * @param {Array} productList - Product list
 * @param {Function} onCalculate - Callback for recalculation
 */
export const updatePricesInCart = (
  cartDisplayElement,
  productList,
  onCalculate,
) => {
  if (!cartDisplayElement || !cartDisplayElement.children) {
    return;
  }

  const cartItems = Array.from(cartDisplayElement.children);

  // Í∞Å Ïû•Î∞îÍµ¨Îãà ÏïÑÏù¥ÌÖúÏùò Í∞ÄÍ≤© ÎîîÏä§ÌîåÎ†àÏù¥ ÏóÖÎç∞Ïù¥Ìä∏
  cartItems.forEach(cartItem => {
    updateCartItemPrice(cartItem, productList);
  });

  // Ïû¨Í≥ÑÏÇ∞ Ìä∏Î¶¨Í±∞
  if (onCalculate) {
    onCalculate();
  }
};

/**
 * Í∞úÎ≥Ñ Ïû•Î∞îÍµ¨Îãà ÏïÑÏù¥ÌÖú Í∞ÄÍ≤© ÎîîÏä§ÌîåÎ†àÏù¥ ÏóÖÎç∞Ïù¥Ìä∏
 * @param {HTMLElement} cartItem - Cart item element
 * @param {Array} productList - Product list
 */
const updateCartItemPrice = (cartItem, productList) => {
  const itemId = cartItem.id;
  const product = findProductById(itemId, productList);

  if (!product) return;

  const priceDiv = cartItem.querySelector('.text-lg');
  const nameDiv = cartItem.querySelector('h3');

  if (!priceDiv || !nameDiv) return;

  // Í∞ÄÍ≤© ÎîîÏä§ÌîåÎ†àÏù¥ ÏóÖÎç∞Ïù¥Ìä∏
  updatePriceDisplay(priceDiv, product);

  // Ïù¥Î¶ÑÏóê ÏÑ∏Ïùº Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
  updateNameDisplay(nameDiv, product);
};

/**
 * ÏÑ∏Ïùº Ìè¨Îß∑ÌåÖÏúºÎ°ú Í∞ÄÍ≤© ÎîîÏä§ÌîåÎ†àÏù¥ ÏóÖÎç∞Ïù¥Ìä∏ (ÏÑ†Ïñ∏Ï†Å)
 * @param {HTMLElement} priceDiv - Price display element
 * @param {object} product - Product data
 */
const updatePriceDisplay = (priceDiv, product) => {
  let priceHTML = '';

  if (product.onSale && product.suggestSale) {
    // Î≤àÍ∞úÏÑ∏Ïùº + Ï∂îÏ≤úÏÑ∏Ïùº
    priceHTML = `<span class="line-through text-gray-400">‚Ç©${product.originalVal.toLocaleString()}</span> <span class="text-purple-600">‚Ç©${product.val.toLocaleString()}</span>`;
  } else if (product.onSale) {
    // Î≤àÍ∞úÏÑ∏ÏùºÎßå
    priceHTML = `<span class="line-through text-gray-400">‚Ç©${product.originalVal.toLocaleString()}</span> <span class="text-red-500">‚Ç©${product.val.toLocaleString()}</span>`;
  } else if (product.suggestSale) {
    // Ï∂îÏ≤úÏÑ∏ÏùºÎßå
    priceHTML = `<span class="line-through text-gray-400">‚Ç©${product.originalVal.toLocaleString()}</span> <span class="text-blue-500">‚Ç©${product.val.toLocaleString()}</span>`;
  } else {
    // ÏùºÎ∞ò Í∞ÄÍ≤©
    priceHTML = `‚Ç©${product.val.toLocaleString()}`;
  }

  setInnerHTML(priceDiv, priceHTML);
};

/**
 * ÏÑ∏Ïùº Ïù∏ÎîîÏºÄÏù¥ÌÑ∞Î°ú Ïù¥Î¶Ñ ÎîîÏä§ÌîåÎ†àÏù¥ ÏóÖÎç∞Ïù¥Ìä∏ (ÏÑ†Ïñ∏Ï†Å)
 * @param {HTMLElement} nameDiv - Name display element
 * @param {object} product - Product data
 */
const updateNameDisplay = (nameDiv, product) => {
  let displayName = product.name;

  if (product.onSale && product.suggestSale) {
    displayName = `‚ö°üíù${product.name}`;
  } else if (product.onSale) {
    displayName = `‚ö°${product.name}`;
  } else if (product.suggestSale) {
    displayName = `üíù${product.name}`;
  }

  setTextContent(nameDiv, displayName);
};

/**
 * Î≤àÍ∞úÏÑ∏Ïùº Ï†ÅÏö© (ÏàúÏàò Ìï®Ïàò)
 * @param {string} productId - ÏÉÅÌíà ID
 * @param {number} discountRate - Ìï†Ïù∏Ïú®
 * @param {Array} productList - ÏÉÅÌíà Î™©Î°ù
 * @returns {boolean} Ï†ÅÏö© ÏÑ±Í≥µ Ïó¨Î∂Ä
 */
export const applyFlashSale = (productId, discountRate, productList) => {
  const product = findProductById(productId, productList);

  if (!product || product.onSale) {
    return false;
  }

  // ÏõêÍ∞Ä Ï†ÄÏû•
  if (!product.originalVal) {
    product.originalVal = product.val;
  }

  // Ìï†Ïù∏ Ï†ÅÏö©
  product.val = Math.round(product.originalVal * (1 - discountRate));
  product.onSale = true;

  return true;
};

/**
 * Ï∂îÏ≤úÏÑ∏Ïùº Ï†ÅÏö© (ÏàúÏàò Ìï®Ïàò)
 * @param {string} productId - ÏÉÅÌíà ID
 * @param {number} discountRate - Ìï†Ïù∏Ïú®
 * @param {Array} productList - ÏÉÅÌíà Î™©Î°ù
 * @returns {boolean} Ï†ÅÏö© ÏÑ±Í≥µ Ïó¨Î∂Ä
 */
export const applySuggestSale = (productId, discountRate, productList) => {
  const product = findProductById(productId, productList);

  if (!product || product.suggestSale) {
    return false;
  }

  // ÏõêÍ∞Ä Ï†ÄÏû•
  if (!product.originalVal) {
    product.originalVal = product.val;
  }

  // Ìï†Ïù∏ Ï†ÅÏö©
  product.val = Math.round(product.originalVal * (1 - discountRate));
  product.suggestSale = true;

  return true;
};
