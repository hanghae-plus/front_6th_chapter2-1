/**
 * ÌîÑÎ°úÎ™®ÏÖò ÏÑúÎπÑÏä§
 * ÌîÑÎ°úÎ™®ÏÖò Í¥ÄÎ†® ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅ
 */

import {
  applyFlashSale,
  applySuggestSale,
} from '@/basic/features/cart/services/promotionPriceService.js';
import { updateProductSelector } from '@/basic/features/product/services/productService.js';
import { productState } from '@/basic/features/product/store/productStore.js';
import { BUSINESS_CONSTANTS } from '@/basic/shared/constants/business.js';
import { findElement } from '@/basic/shared/core/domUtils.js';

/**
 * ÎûúÎç§ ÏßÄÏó∞ ÏãúÍ∞Ñ ÏÉùÏÑ± (ÏàúÏàò Ìï®Ïàò)
 * @param {number} maxDelay - ÏµúÎåÄ ÏßÄÏó∞ ÏãúÍ∞Ñ
 * @returns {number} ÏßÄÏó∞ ÏãúÍ∞Ñ
 */
const generateRandomDelay = maxDelay => {
  return Math.random() * maxDelay;
};

/**
 * ÎûúÎç§ ÏÉÅÌíà ÏÑ†ÌÉù (ÏàúÏàò Ìï®Ïàò)
 * @param {Array} products - ÏÉÅÌíà Î™©Î°ù
 * @returns {object} ÏÑ†ÌÉùÎêú ÏÉÅÌíà
 */
const selectRandomProduct = products => {
  const luckyIdx = Math.floor(Math.random() * products.length);
  return products[luckyIdx];
};

/**
 * Ï∂îÏ≤ú ÏÉÅÌíà Ï∞æÍ∏∞ (ÏàúÏàò Ìï®Ïàò)
 * @param {Array} products - ÏÉÅÌíà Î™©Î°ù
 * @param {string} lastSelectedId - ÎßàÏßÄÎßâ ÏÑ†ÌÉùÎêú ÏÉÅÌíà ID
 * @returns {object|null} Ï∂îÏ≤ú ÏÉÅÌíà
 */
const findRecommendation = (products, lastSelectedId) => {
  return products.find(
    product =>
      product.id !== lastSelectedId && product.q > 0 && !product.suggestSale,
  );
};

/**
 * Î≤àÍ∞úÏÑ∏Ïùº ÏïåÎ¶º ÌëúÏãú (Î∂ÄÏàò Ìö®Í≥º)
 * @param {object} product - ÏÉÅÌíà Ï†ïÎ≥¥
 * @param {number} discountRate - Ìï†Ïù∏Ïú®
 */
const showFlashSaleAlert = (product, discountRate) => {
  const discountPercent = discountRate * 100;
  alert(`‚ö°Î≤àÍ∞úÏÑ∏Ïùº! ${product.name}Ïù¥(Í∞Ä) ${discountPercent}% Ìï†Ïù∏ Ï§ëÏûÖÎãàÎã§!`);
};

/**
 * Ï∂îÏ≤úÏÑ∏Ïùº ÏïåÎ¶º ÌëúÏãú (Î∂ÄÏàò Ìö®Í≥º)
 * @param {object} product - ÏÉÅÌíà Ï†ïÎ≥¥
 * @param {number} discountRate - Ìï†Ïù∏Ïú®
 */
const showRecommendationAlert = (product, discountRate) => {
  const discountPercent = discountRate * 100;
  alert(
    `üíù ${product.name}ÏùÄ(Îäî) Ïñ¥Îñ†ÏÑ∏Ïöî? ÏßÄÍ∏à Íµ¨Îß§ÌïòÏãúÎ©¥ ${discountPercent}% Ï∂îÍ∞Ä Ìï†Ïù∏!`,
  );
};

/**
 * Ïπ¥Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïù¥Î≤§Ìä∏ Î∞úÏÉù (Î∂ÄÏàò Ìö®Í≥º)
 */
const triggerCartUpdate = () => {
  window.dispatchEvent(new CustomEvent('cart-updated'));
};

/**
 * Î≤àÍ∞úÏÑ∏Ïùº ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï
 */
export const setupFlashSaleTimer = () => {
  const lightningDelay = generateRandomDelay(
    BUSINESS_CONSTANTS.TIMERS.RANDOM_DELAY,
  );

  setTimeout(() => {
    setInterval(() => {
      const products = productState.products;
      const luckyItem = selectRandomProduct(products);

      // ÏàúÏàò Ìï®ÏàòÎ°ú Î≤àÍ∞úÏÑ∏Ïùº Î°úÏßÅ
      const saleApplied = applyFlashSale(
        luckyItem.id,
        BUSINESS_CONSTANTS.DISCOUNT.FLASH_SALE_DISCOUNT_RATE,
        products,
      );

      if (saleApplied) {
        showFlashSaleAlert(
          luckyItem,
          BUSINESS_CONSTANTS.DISCOUNT.FLASH_SALE_DISCOUNT_RATE,
        );
        updateProductSelector();
        triggerCartUpdate();
      }
    }, BUSINESS_CONSTANTS.TIMERS.FLASH_SALE_INTERVAL);
  }, lightningDelay);
};

/**
 * Ï∂îÏ≤úÏÑ∏Ïùº ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï
 */
export const setupRecommendationTimer = () => {
  const initialDelay = generateRandomDelay(BUSINESS_CONSTANTS.TIMERS.MAX_DELAY);

  setTimeout(() => {
    setInterval(() => {
      const cartDisplayElement = findElement('#cart-items');
      if (!cartDisplayElement || cartDisplayElement.children.length === 0) {
        return;
      }

      const { lastSelectedProduct, products } = productState;

      if (!lastSelectedProduct) return;

      const suggest = findRecommendation(products, lastSelectedProduct);

      if (suggest) {
        // ÏàúÏàò Ìï®ÏàòÎ°ú Ï∂îÏ≤úÏÑ∏Ïùº Î°úÏßÅ
        const saleApplied = applySuggestSale(
          suggest.id,
          BUSINESS_CONSTANTS.DISCOUNT.SUGGEST_DISCOUNT_RATE,
          products,
        );

        if (saleApplied) {
          showRecommendationAlert(
            suggest,
            BUSINESS_CONSTANTS.DISCOUNT.SUGGEST_DISCOUNT_RATE,
          );
          updateProductSelector();
          triggerCartUpdate();
        }
      }
    }, BUSINESS_CONSTANTS.TIMERS.SUGGEST_SALE_INTERVAL);
  }, initialDelay);
};
