import * as constants from '../../../constants/index.js';

const { 
  SUPER_SALE_TEXT,
  LIGHTNING_SALE_TEXT,
  SUGGESTION_SALE_TEXT
} = constants;

/**
 * ÏÉÅÌíà ÏòµÏÖòÏùò ÌëúÏãú Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§ (utilsÏóêÏÑú Ïù¥Ï†Ñ)
 * @param {Object} item - ÏÉÅÌíà Ï†ïÎ≥¥ Í∞ùÏ≤¥
 * @param {string} item.name - ÏÉÅÌíàÎ™Ö
 * @param {number} item.price - ÌòÑÏû¨ Í∞ÄÍ≤©
 * @param {number} item.originalPrice - ÏõêÎûò Í∞ÄÍ≤©
 * @param {number} item.quantity - Ïû¨Í≥† ÏàòÎüâ
 * @param {boolean} item.onSale - Î≤àÍ∞úÏÑ∏Ïùº Ïó¨Î∂Ä
 * @param {boolean} item.suggestSale - Ï∂îÏ≤úÌï†Ïù∏ Ïó¨Î∂Ä
 * @returns {Object} ÏòµÏÖò ÌëúÏãú Ï†ïÎ≥¥
 * @returns {string} returns.textContent - ÌëúÏãúÌï† ÌÖçÏä§Ìä∏
 * @returns {string} returns.className - CSS ÌÅ¥ÎûòÏä§Î™Ö
 * @returns {boolean} returns.disabled - ÎπÑÌôúÏÑ±Ìôî Ïó¨Î∂Ä
 */
export const getOptionData = (item) => {
  const discountText = (item.onSale ? " ‚ö°SALE" : "") + (item.suggestSale ? " üíùÏ∂îÏ≤ú" : "");
  
  // ÌíàÏ†àÏù∏ Í≤ΩÏö∞
  if (item.quantity === 0) {
    return {
      textContent: `${item.name} - ${item.price}Ïõê (ÌíàÏ†à)${discountText}`,
      className: "text-gray-400",
      disabled: true
    };
  }
  
  // Í≤ΩÏö∞Î≥Ñ Îß§Ìïë Í∞ùÏ≤¥
  const saleTypeMap = {
    bothSales: item.onSale && item.suggestSale,
    lightningOnly: item.onSale && !item.suggestSale, 
    suggestionOnly: !item.onSale && item.suggestSale,
    normal: !item.onSale && !item.suggestSale
  };
  
  const optionConfigs = {
    bothSales: {
      textContent: `‚ö°üíù${item.name} - ${item.originalPrice}Ïõê ‚Üí ${item.price}Ïõê (${SUPER_SALE_TEXT})`,
      className: "text-purple-600 font-bold",
      disabled: false
    },
    lightningOnly: {
      textContent: `‚ö°${item.name} - ${item.originalPrice}Ïõê ‚Üí ${item.price}Ïõê (${LIGHTNING_SALE_TEXT})`,
      className: "text-red-500 font-bold", 
      disabled: false
    },
    suggestionOnly: {
      textContent: `üíù${item.name} - ${item.originalPrice}Ïõê ‚Üí ${item.price}Ïõê (${SUGGESTION_SALE_TEXT})`,
      className: "text-blue-500 font-bold",
      disabled: false
    },
    normal: {
      textContent: `${item.name} - ${item.price}Ïõê${discountText}`,
      className: "",
      disabled: false
    }
  };
  
  // Ìï¥ÎãπÌïòÎäî Í≤ΩÏö∞ Ï∞æÍ∏∞
  const activeType = Object.keys(saleTypeMap).find(type => saleTypeMap[type]);
  return optionConfigs[activeType];
};

/**
 * Ïû•Î∞îÍµ¨Îãà ÎÇ¥ ÏÉÅÌíàÏùò ÌëúÏãú Ï†ïÎ≥¥Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§ (main.basic.jsÏóêÏÑú Ïù¥Ï†Ñ)
 * @param {Object} product - ÏÉÅÌíà Ï†ïÎ≥¥ Í∞ùÏ≤¥
 * @param {string} product.name - ÏÉÅÌíàÎ™Ö
 * @param {number} product.price - ÌòÑÏû¨ Í∞ÄÍ≤©
 * @param {number} product.originalPrice - ÏõêÎûò Í∞ÄÍ≤©
 * @param {boolean} product.onSale - Î≤àÍ∞úÏÑ∏Ïùº Ïó¨Î∂Ä
 * @param {boolean} product.suggestSale - Ï∂îÏ≤úÌï†Ïù∏ Ïó¨Î∂Ä
 * @returns {Object} ÌëúÏãú Ï†ïÎ≥¥
 * @returns {string} returns.priceHtml - Í∞ÄÍ≤© HTML
 * @returns {string} returns.nameText - Ïù¥Î¶Ñ ÌÖçÏä§Ìä∏
 */
export const getProductDisplayInfo = (product) => {
  const hasBothSales = product.onSale && product.suggestSale;
  const hasLightningSale = product.onSale && !product.suggestSale;
  const hasSuggestionSale = !product.onSale && product.suggestSale;
  
  if (hasBothSales) {
    return {
      priceHtml: `<span class="line-through text-gray-400">‚Ç©${product.originalPrice.toLocaleString()}</span> <span class="text-purple-600">‚Ç©${product.price.toLocaleString()}</span>`,
      nameText: "‚ö°üíù" + product.name
    };
  }
  
  if (hasLightningSale) {
    return {
      priceHtml: `<span class="line-through text-gray-400">‚Ç©${product.originalPrice.toLocaleString()}</span> <span class="text-red-500">‚Ç©${product.price.toLocaleString()}</span>`,
      nameText: "‚ö°" + product.name
    };
  }
  
  if (hasSuggestionSale) {
    return {
      priceHtml: `<span class="line-through text-gray-400">‚Ç©${product.originalPrice.toLocaleString()}</span> <span class="text-blue-500">‚Ç©${product.price.toLocaleString()}</span>`,
      nameText: "üíù" + product.name
    };
  }
  
  return {
    priceHtml: `‚Ç©${product.price.toLocaleString()}`,
    nameText: product.name
  };
};

/**
 * product select optionsÎ•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§ (main.basic.jsÏóêÏÑú Ïù¥Ï†Ñ)
 * @param {Array} productList - ÏÉÅÌíà Î™©Î°ù
 * @param {Element} productSelectElement - select DOM element
 * @param {Function} createElement - DOM element ÏÉùÏÑ± Ìï®Ïàò
 * @param {number} totalStockWarningThreshold - Ïû¨Í≥† Í≤ΩÍ≥† ÏûÑÍ≥ÑÍ∞í
 */
export const updateSelectOptions = (productList, productSelectElement, createElement, totalStockWarningThreshold) => {
  const totalStock = productList.reduce((sum, product) => sum + product.quantity, 0);

  const options = productList.map(item => {
    const optionData = getOptionData(item);
    return createElement("option", {
      value: item.id,
      textContent: optionData.textContent,
      className: optionData.className,
      disabled: optionData.disabled
    });
  });

  productSelectElement.replaceChildren(...options);
  productSelectElement.style.borderColor = totalStock < totalStockWarningThreshold ? "orange" : "";
}; 