import { useState, useCallback } from 'react';
import { ProductType } from '../types';
import { PRODUCT_LIST } from '../constants';

export const useProducts = () => {
  const [products, setProducts] = useState<ProductType[]>(PRODUCT_LIST);
  const [selectedProduct, setSelectedProduct] = useState<string>('p1'); // ÌÇ§Î≥¥ÎìúÎ°ú Ï¥àÍ∏∞ ÏÑ§Ï†ï

  // ÏÉÅÌíà ÏïÑÏù¥ÏΩò ÏÉùÏÑ±
  const generateProductIcon = useCallback((product: ProductType): string => {
    const icons = {
      p1: '‚å®Ô∏è',
      p2: 'üñ±Ô∏è',
      p3: 'üñ•Ô∏è',
      p4: 'üíº',
      p5: 'üîä',
    };
    return icons[product.id as keyof typeof icons] || 'üì¶';
  }, []);

  // Í∞ÄÍ≤© ÏÉâÏÉÅ Í≤∞Ï†ï
  const getPriceColor = useCallback((product: ProductType): string => {
    if (product.onSale && product.suggestSale) {
      return 'text-purple-600 font-bold'; // Î≤àÍ∞úÏÑ∏Ïùº + Ï∂îÏ≤úÌï†Ïù∏
    } else if (product.onSale) {
      return 'text-red-600 font-bold'; // Î≤àÍ∞úÏÑ∏Ïùº
    } else if (product.suggestSale) {
      return 'text-blue-600 font-bold'; // Ï∂îÏ≤úÌï†Ïù∏
    }
    return 'text-black';
  }, []);

  // Í∞ÄÍ≤© HTML ÏÉùÏÑ±
  const generatePriceHtml = useCallback(
    (product: ProductType): string => {
      const priceColor = getPriceColor(product);
      const currentPrice = product.price;
      const originalPrice = product.originalPrice;

      if (currentPrice < originalPrice) {
        return `
        <span class="${priceColor}">‚Ç©${currentPrice.toLocaleString()}</span>
        <span class="text-gray-500 line-through text-sm">‚Ç©${originalPrice.toLocaleString()}</span>
      `;
      }

      return `<span class="${priceColor}">‚Ç©${currentPrice.toLocaleString()}</span>`;
    },
    [getPriceColor]
  );

  // ÏÉÅÌíàÎ™Ö ÏÉùÏÑ±
  const generateProductName = useCallback((product: ProductType): string => {
    return product.name;
  }, []);

  // Í∞ÄÍ≤© ÌÖçÏä§Ìä∏ ÏÉùÏÑ±
  const generatePriceText = useCallback((product: ProductType): string => {
    const currentPrice = product.price;
    const originalPrice = product.originalPrice;

    if (currentPrice < originalPrice) {
      return `‚Ç©${currentPrice.toLocaleString()} (Ìï†Ïù∏)`;
    }

    return `‚Ç©${currentPrice.toLocaleString()}`;
  }, []);

  // Ìï†Ïù∏ Ïó¨Î∂Ä ÌôïÏù∏
  const hasDiscount = useCallback((product: ProductType): boolean => {
    return product.price < product.originalPrice;
  }, []);

  // ÏõêÍ∞Ä Í∞ÄÏ†∏Ïò§Í∏∞
  const getOriginalPrice = useCallback((product: ProductType): number => {
    return product.originalPrice;
  }, []);

  // ÌòÑÏû¨ Í∞ÄÍ≤© Í∞ÄÏ†∏Ïò§Í∏∞
  const getCurrentPrice = useCallback((product: ProductType): number => {
    return product.price;
  }, []);

  // ÏÉÅÌíà ÏÑ†ÌÉù
  const selectProduct = useCallback(
    (productId: string) => {
      const product = products.find((p) => p.id === productId);
      if (product && product.quantity > 0) {
        setSelectedProduct(productId);
      }
    },
    [products]
  );

  // ÏÉÅÌíà Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
  const updateProductList = useCallback((newProductList: ProductType[]) => {
    setProducts(newProductList);
  }, []);

  // ÏÉÅÌíà Ïû¨Í≥† ÏóÖÎç∞Ïù¥Ìä∏
  const updateProductStock = useCallback((productId: string, change: number) => {
    setProducts((prev) =>
      prev.map((product) =>
        product.id === productId
          ? { ...product, quantity: Math.max(0, product.quantity + change) }
          : product
      )
    );
  }, []);

  // ÏÉÅÌíà Ìï†Ïù∏ Ï†ÅÏö©
  const applyProductDiscount = useCallback(
    (productId: string, discountType: 'lightning' | 'suggest') => {
      setProducts((prev) =>
        prev.map((product) => {
          if (product.id === productId) {
            let newPrice = product.price;
            let newOriginalPrice = product.originalPrice;

            if (discountType === 'lightning') {
              // Î≤àÍ∞úÏÑ∏Ïùº: 20% Ìï†Ïù∏
              newPrice = Math.round(product.price * 0.8);
              newOriginalPrice = product.price;
            } else if (discountType === 'suggest') {
              // Ï∂îÏ≤úÌï†Ïù∏: 5% Ìï†Ïù∏
              newPrice = Math.round(product.price * 0.95);
              newOriginalPrice = product.price;
            }

            return {
              ...product,
              onSale: discountType === 'lightning',
              suggestSale: discountType === 'suggest',
              price: newPrice,
              originalPrice: newOriginalPrice,
            };
          }
          return product;
        })
      );
    },
    []
  );

  return {
    products,
    selectedProduct,
    selectProduct,
    updateProductList,
    updateProductStock,
    applyProductDiscount,
    // Í∞ÄÍ≤© Í¥ÄÎ†® Ìï®ÏàòÎì§ÎèÑ Ïô∏Î∂ÄÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù ÎÖ∏Ï∂ú
    generateProductIcon,
    getPriceColor,
    generatePriceHtml,
    generateProductName,
    generatePriceText,
    hasDiscount,
    getOriginalPrice,
    getCurrentPrice,
  };
};
